%lex

%%

\/\/.*  			/* skip coment */

\/\*(.|\s)*\*\/		/* skip comments*/

\s+					/* skip whitespace */

\bstring\b			return STRING

// ---------------------------------------
// Keywords

\bdef\b				return 'DEF'
\breturn\b 			return 'RETURN'
\bif\b 				return 'IF'
\belse\b 			return 'ELSE'
\btrue\b			return "TRUE"
\bfalse\b			return "FALSE"
\bnull\b 			return "NULL"
\blet\b 			return "LET"
\bwhile\b			return 'WHILE'
\bdo\b				return 'DO'
\bfor\b				return 'FOR'

\bclass\b 			return 'CLASS'
\bextends\b 		return 'EXTENDS'
\bsuper\b 			return 'SUPER'
\bnew\b 			return 'NEW'
\bthis\b			return 'THIS'

\d+					return 'NUMBER'
\w+					return 'INDENTIFIER'



[+\-]				return  'ADDITIVE_OPARATOR'
[*/]				return  'MULTIPLICATIVE_OPARATOR'


\|\|				return 'LOGICAL_OR'
\&\&				return 'LOGICAL_AND'

[\=!]\=				return 'EQUALITY_OPARATOR'
[><]\=?				return	'RELATIONAL_OPARATOR'

\=					return 'SIMPLE_ASSIGN'
[*/+\-]=			return 'COMPLEX_ASSIGN'


/lex

// -----------------------------
// Moudle include

%{
	function BinaryExpression(left, operator, right) {
		return {
			type: 'BinaryExpression',
			operator,
			left,
			right
		}
	}

	function LogicalExpression(left, operator, right) {
		return {
			type: 'LogicalExpression',
			operator,
			left,
			right
		}
	}

	function UnaryFnExpression(operator, argument) {
		return {
			type: 'UnaryFnExpression',
			operator,
			argument
		}
	}

	function Literal(namePrefix, value) {
		return {
			type: `${namePrefix}Literal`,
			value
		}
	}

	function IfStatement(test, consequent, alternate) {
		return {
			type: 'IfStatement',
			test,
			consequent,
			alternate
		}
	}

	function MemberExpression(object, property) {
		return {
			type: 'MemberExpression',
			object,
			property
		}
	}

%}

%nonassoc THEN
%nonassoc ELSE

//-------------------------------
// syntacitic grammar


%%

Program
	: StatementList
		{ $$ = { type: 'Program', body: $1, } }
	;

StatementList
	: Statement
		{ $$ = [$1]}
	| StatementList Statement
		{ $1.push($2); $$ = $1 }
	;


Statement
	: ExpressionStatement
	| EmptyStatement
	| BlockStatement
	| FunctionDeclaration
	| ReturnStatement
	| IfStatement
	| VariableStatement
	| IterationStatement
	;

ExpressionStatement
	: Expression  ';'
		{ $$ = { type: 'ExpressionStatement', expression: $1 } }
	;

EmptyStatement
	: ';'
		{ $$ = { type: 'EmptyStatement', } }
	;

BlockStatement
	: '{' OptStatementList '}'
		{ $$ = { type: 'BlockStatement', statement: $2 } }
	;

OptStatementList
	: StatementList
	| /* empty */
		{ $$ = [] }
	;

FunctionDeclaration
	: DEF Identifier '(' OptFormalParameterList ')' BlockStatement
		{ $$ = { type: 'FunctionDeclaration', name: $2, params: $4, body: $6, } }
	;

Identifier
	: INDENTIFIER
		{ $$ = { type: 'Identifier', value: $1, } }
	;

OptFormalParameterList
	: FormalParameterList
	| /* empty */
		{ $$ = [] }
	;

FormalParameterList
	: Identifier
		{ $$ = [$1] }
	| FormalParameterList ',' Identifier
		{  $1.push($3); $$ = $1  }
	;

ReturnStatement
	: RETURN OptExpression ';'
		{ $$ = { type: 'ReturnStatement', argument: $2, } }
	;

OptExpression
	: Expression
	| /* empty */
		{ $$ = null }
	;

VariableStatement
	: LET VariableDeclarationList
		{  $$ = { type: 'VariableStatement', declarations: $2 } }
	;


VariableDeclarationList
	: VariableDeclaration
		{ $$ = [$1] }
	| VariableDeclarationList ',' VariableDeclaration
		{ $1.push($3); $$ = $1 }
	;

VariableDeclaration
	: Identifier OptVariableInitializer
		{ $$ = { type: 'VariableDeclaration', id: $1, init: $2 } }
	;

OptVariableInitializer
	: VariableInitializer 
	| /* empty */
	;

VariableInitializer
	: SIMPLE_ASSIGN  AssigmentExpression
		{ $$ = $2 }
	;

IfStatement
	: IF '(' Expression ')' Statement %prec THEN
		{ $$ = IfStatement($3, $5) }
	| IF '(' Expression ')' Statement ELSE Statement
		{ $$ = IfStatement($3, $5, $7) }
	;

Expression
	: AssigmentExpression
	;

AssigmentExpression
	: LogicalORExpression
	| LeftHandSideExpression AssignmentOperator AssigmentExpression
		{ $$ = { type: 'AssigmentExpression', left: $1, operator: $2, right: $3, } }
	;

LeftHandSideExpression
	: Identifier
	;

AssignmentOperator
	: SIMPLE_ASSIGN
	| COMPLEX_ASSIGN
	;

LogicalORExpression
	: LogicalANDExpression
	| LogicalORExpression LOGICAL_OR LogicalANDExpression
		{ $$ = LogicalExpression($1, $2, $3) }
	;

LogicalANDExpression
	: EqualityExpression
	| LogicalANDExpression LOGICAL_AND EqualityExpression
		{ $$ = LogicalExpression($1, $2, $3) }
	;

EqualityExpression
	: RelationalExpression
	| EqualityExpression EQUALITY_OPARATOR RelationalExpression
		{ $$ = BinaryExpression($1, $2, $3) }
	;

RelationalExpression
	: AdditiveExpression
	| RelationalExpression RELATIONAL_OPARATOR AdditiveExpression
		{ $$ = BinaryExpression($1, $2, $3) }
	;

AdditiveExpresion
	: AdditiveExpresion ADDITIVE_OPARATOR MultiplicativeExpresion 
		{  $$ = BinaryExpression($1, $2, $3) }
	| MultiplicativeExpresion
	;

MultiplicativeExpresion
	: MultiplicativeExpresion MULTIPLICATIVE_OPARATOR PrimaryExpresion 
		{  $$ = BinaryExpression($1, $2, $3) }
	| PrimaryExpresion
	;

PrimaryExpresion
	: Litreal
	| Identifier
	| ParenthesesizedExpression
	;

Literal
	: NumericLiteral
	| TrueLiteral
	| FalseLiteral
	| NullLiteral
	;

TrueLiteral
	: TRUE { $$ = Literal('Boolean', true) }
	;

NullLiteral
	: NULL { $$ = Literal('Null', null) }
	;

FalseLiteral
	: FALSE { $$ = Literal('Boolean', false) }
	;

NumericLiteral
	: NUMBER { $$ = Literal('Numeric', Number($1)) }
	;

ParenthesesizedExpression
	: '(' Expression ')' { $$ = $2 }
	;